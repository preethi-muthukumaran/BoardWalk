import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.net.URL;

//He calls "main enemy" = resistance = people

public class People {
	// Attributes: position, size, velocity
	private int x, y, w, h, vx, vy;
	
	// Image and tracking attributes
	private Image sImage;
	private AffineTransform tx = AffineTransform.getTranslateInstance(x, y);

	//Other objects
		//For now, I will create a projectiles data type
		// class for "weapon" - to experiment with autofire
	Projectile[] weapon = new Projectile[10];
	//shooting variables
	private int cntr = 0, rate = 50;
	
	// Default People Constructor: image
	public People(String fileName) {
			x = 400;
			y = 300;
			w = 100;
			h = 100;
			vx = -10;
			vy = 0;

			//call weapons - load!
			loadWeapon();
			
			//call updatePeople whenever changing People x and y
			sImage = getImage(fileName);
			updatePeople();
		}

	// People Constructor: location and image specific
	public People(String fileName, int paramX, int paramY) {
			x = paramX;
			y = paramY;
			w = 175;
			h = 75;
			vx = -10;
			vy = 0;
			
			//call weapons - load!
			loadWeapon();
						
			//call updatePeople whenever changing People x and y
			sImage = getImage(fileName);
			updatePeople();

		}

	// paint method
	// draw the affinetransform
	public void paint(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		g2.drawImage(sImage, tx, null); // draws GIF
		x += vx; //don't know if I need this now?
		updatePeople(); //don't know if I need this now?
		
		//update counter
		cntr++;
		if(cntr%rate ==0) {
			fireWeapon();
			cntr = 0;
		}
		
		
		//have to paint weapons
		// draw active missiles
		for (int i = 0; i < weapon.length; i++) {
			if (weapon[i].active) {
				weapon[i].paint(g);
			}

			// figure out how to deactivate
			// a projectile when it is off the screen
		}
		
	}

	// updatePeople method - called everytime People object x and y change
	public void updatePeople() {
		tx.setToTranslation(x, y);
	}

	// movePeople method - people are constantly moving across screen
	public void movePeople() {
		x -= 0;

	}

	// tilePeople method - people are constantly tiling across screen
	public void tilePeople() {
		movePeople();
		if (x <= -100) {
			x = (int) (Math.random() * (800) + 800);
		}

	}
	
	// loadWeapon method: instantiate all weapon objects
	//Note: weapon class and array has not been created yet + new image
	public void loadWeapon() {
		for (int i = 0; i < weapon.length; i++) {
			weapon[i] = new Projectile("rock.gif");
		}
	}

	// fireProjectile method: firing projectiles
	//Note: weapon class and array has not been created yet
	public void fireWeapon() {
		for (int i = 0; i < weapon.length; i++) {
			if (!weapon[i].active) {
				weapon[i].active = true;

				// set position
				weapon[i].setX(x + 45); //change loc
				weapon[i].setY(y + 90); //change loc

				// set velocities
				weapon[i].setVy(-10); //make negative
				weapon[i].setVx(x); //change

				break;
			}
		}
	}
	// Image method
	// converts image to make it drawable in paint
	private Image getImage(String path) {
		Image tempImage = null;
		try {
			URL imageURL = Seagull.class.getResource(path);
			tempImage = Toolkit.getDefaultToolkit().getImage(imageURL);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return tempImage;
	}

	//Collision 
	public boolean collided(Seagull s) {
		//Check protagonist to enemy collision
		Rectangle enemy = new Rectangle(x, y, 75, 100); //check size dimensions
		Rectangle sSeagull = new Rectangle(s.getX(), s.getY(), 200, 250); //check size dimensions
		boolean coll = enemy.intersects(sSeagull);
		
		// visit all active projectiles --> weapons
		//check if they're "colliding" with seagull
		for(int i = 0; i < weapon.length; i++) {
			if(weapon[i].active) {
				if(weapon[i].collided(s)) {
					//System.exit(-1); //exit --> remove later
					coll = true;
					break;
				}
			}
		}
		
		return coll; //col is set to true if seagull collides  with people or weapons
	}

	// Getters/Setters

	// Position: x, y --> Track People object to teleport + collision
	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	// Size: w, h --> Collision
	public int getW() {
		return w;
	}

	public void setW(int w) {
		this.w = w;
	}

	public int getH() {
		return h;
	}

	public void setH(int h) {
		this.h = h;
	}
	
	//Velocity: vx --> control?
	public int getVx() {
		return vx;
	}
	
	public void setVx(int vx) {
		this.vx = vx;
	}
}
