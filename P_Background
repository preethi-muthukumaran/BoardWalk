
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.net.URL;

public class Background {
	//Attributes: position, size, velocity (x)
	private int x, y, w, h, vx;
	
	//Image and location tracker attributes
	private Image sImage;
	private AffineTransform tx = AffineTransform.getTranslateInstance(x, y);
	
	//Other objects: heart
	Heart[] heart = new Heart[3];

	//Driver object
	//Driver driver = new Driver(); //is this needed?
	//Default Background Constructor: image
	public Background(String fileName) {
		x = 0;
		y = 0;
		w = 800;
		h = 600;
		vx = -10;
		
		//hearts
		loadHeart();
		
		//update whenever changing x and y
		sImage = getImage(fileName);
		updateBackground();
	}

	//Background Constructor: location + image specific
	public Background(String fileName, int paramX, int paramY) {
		x = paramX;
		y = paramY;
		w = 800;
		h = 600;
		vx = -10;
		
		//hearts
		loadHeart();
		
		//update whenever changing x and y
		sImage = getImage(fileName);
		updateBackground();
	}

	public void paint(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		g2.drawImage(sImage, tx, null);
		
		//need to paint active hearts
		for(int i = 0; i < heart.length; i++) {
			if(heart[i].activeHeart) {
				heart[i].paint(g);
			}
		}
	}

	public void updateBackground() {
		tx.setToTranslation(x, y);
		//if(!driver.coll_heart3) { //how do I call a public bool from driver?
							//static methods
					
			
		//}
	}

	private Image getImage(String path) {
		Image tempImage = null;
		try {
			URL imageURL = Background.class.getResource(path);
			tempImage = Toolkit.getDefaultToolkit().getImage(imageURL);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return tempImage;
	}

	//Tiling Methods
	
	//backMove method: set backward velocity of background
	public void backMove() {
		x -= 5;
	}

	//tileBackground method: tile background
	public void tileBackground() {
		if (x == -800) {
			x = 800;
		}
	}
	
	//loadHeart - instantiate hearts
	public void loadHeart() {
		int heart_space = 660;
		for(int i = 0; i < heart.length; i++) {
			heart[i] = new Heart("heart.png", heart_space + 2, 25); //might need to change spacing by
																	//modifying heart_space and x val of heart[i]
			heart_space += 30;
		}

		
	}
	
	// Getters/Setters: position, size (width), velocity (x)
	
	//Position: x, y
	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	//Size: w
	public int getW() {
		return w;
	}

	public void setW(int w) {
		this.w = w;
	}

	//Velocity: x
	public int getVx() {
		return vx;
	}

	public void setVx(int vx) {
		this.vx = vx;
	}


}
